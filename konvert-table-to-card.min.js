/* 
Convert table to card for responsivesness
by @kushalcodes 
*/
let TABLE_KONVERTER = { referenceTableIdOrClassName: "", referenceTableParentEl: null, isReferenceIdOrClass: function () { return "#" === this.referenceTableIdOrClassName.substring(0, 1) ? "id" : "." === this.referenceTableIdOrClassName.substring(0, 1) && "class" }, konvert: function () { this.hideTable(); const referenceType = this.isReferenceIdOrClass(); referenceType ? ("id" === referenceType && this.handleId(), "class" === referenceType && this.handleClass()) : console.error("Invalid id or class name provided to run table konverter!"), TABLE_KONVERTER.handleWindowWidthChange(window.innerWidth), window.addEventListener("resize", (function (e) { TABLE_KONVERTER.handleWindowWidthChange(e.target.innerWidth) })) }, tableHeadingTitles: [], tableBodyTRs: [], tableCard: [], handleId: function () { const tableId = this.referenceTableIdOrClassName.substring(1), table = document.getElementById(tableId); this.referenceTableParentEl = table.parentElement; const tableHead = table.getElementsByTagName("thead")[0], tableBody = table.getElementsByTagName("tbody")[0], tableHeadings = tableHead.getElementsByTagName("th"); for (let i = 0; i < tableHeadings.length; i++) { const heading = tableHeadings[i]; this.tableHeadingTitles.push(heading.innerText) } const tableBodyContents = tableBody.getElementsByTagName("tr"); this.tableBodyTRs = tableBodyContents, this.generateTableCard(), this.generateCardElement() }, handleClass: function () { }, generateTableCard: function () { for (let i = 0; i < this.tableBodyTRs.length; i++) { const bodyTr = this.tableBodyTRs[i], bodyTds = bodyTr.getElementsByTagName("td"); let tempObj = {}; for (let j = 0; j < bodyTds.length; j++) { const bodyTd = bodyTds[j], titleLowered = this.tableHeadingTitles[j].toLowerCase(), title = titleLowered.replace(" ", "_"); tempObj[title] = bodyTd.innerHTML } this.tableCard.push(tempObj) } }, insertAfter: function (referenceNode, newNode) { referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling) }, generateCardElement: function () { for (let i = 0; i < this.tableCard.length; i++) { const cardObj = this.tableCard[i], generatedCard = this.generateCardSingle(cardObj); this.referenceTableParentEl && this.insertAfter(this.referenceTableParentEl, generatedCard) } }, generateCardSingle: function (cardObj) { let card = document.createElement("div"); card.className = "card table-card", card.style.width = "100%", card.style.margin = "0 auto", card.style.marginBottom = "5px", card.style.marginTop = "5px"; for (const key in cardObj) if (Object.hasOwnProperty.call(cardObj, key)) { const value = cardObj[key]; let keyReadable = this.capitalize(key).replace("_", " "), cardBody = document.createElement("div"); cardBody.className = "card-body", cardBody.innerHTML += "<h5 class='card-title'>" + keyReadable + "</h5>", cardBody.innerHTML += "<p class='card-text'>" + value + "</p>", card.appendChild(cardBody) } return card }, capitalize: function (s) { return s[0].toUpperCase() + s.slice(1) }, hideTable: function () { const referenceType = this.isReferenceIdOrClass(); if (referenceType) { const referenceTableSelector = this.referenceTableIdOrClassName.substring(1); if ("id" === referenceType && (document.getElementById(referenceTableSelector).style.display = "none"), "class" === referenceType) { const elements = document.getElementsByClassName(referenceTableSelector); for (let i = 0; i < elements.length; i++)elements[i].style.display = "none" } const tableCards = document.getElementsByClassName("table-card"); for (let i = 0; i < tableCards.length; i++)tableCards[i].style.display = "block" } }, showTable: function () { const referenceType = this.isReferenceIdOrClass(); if (referenceType) { const referenceTableSelector = this.referenceTableIdOrClassName.substring(1); if ("id" === referenceType && (document.getElementById(referenceTableSelector).style.display = "table"), "class" === referenceType) { const elements = document.getElementsByClassName(referenceTableSelector); for (let i = 0; i < elements.length; i++)elements[i].style.display = "table" } const tableCards = document.getElementsByClassName("table-card"); for (let i = 0; i < tableCards.length; i++)tableCards[i].style.display = "none" } }, handleWindowWidthChange: function (currentWidth) { currentWidth <= 425 ? this.hideTable() : this.showTable() }, init: function (elementIdOrClassName) { this.referenceTableIdOrClassName = elementIdOrClassName, this.konvert() } };